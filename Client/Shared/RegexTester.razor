@using System.Text.RegularExpressions
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject BlazorWasmRegexTest.Shared.Interfaces.IRegexService regexService
@inject BlazorWasmRegexTest.Shared.Interfaces.IHtmlHelperService htmlHelperService
@inject SessionStorage SessionStorage

<h2>Regex Tester</h2>

<p>
    <label>Regex:</label>
    <input class="form-control" @bind="RegexText" />
</p>
<p>
    <label>Tests:</label>
    <textarea class="form-control" @bind="Tests" rows="10"></textarea>
</p>
<p>
    <BSButton Color="Color.Primary" OnClick="Test_Click"><span class="oi oi-beaker" aria-hidden="true">&nbsp;</span>Test</BSButton>
    @*<button class="btn btn-primary" @onclick="Test_Click">Test</button>*@
</p>
<p>
    <BSTabGroup>
        <BSTabList>
            <BSTab>
                <BSTabLabel>Matches</BSTabLabel>
                <BSTabContent>
                    <ul class="list-group">
                        @foreach (var m in MatchedStrings)
                        {
                            <li class="list-group-item">@((MarkupString)m)</li>
                        }
                    </ul>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Split list</BSTabLabel>
                <BSTabContent>
                    <ul class="list-group">
                        @foreach (var m in SplitList)
                        {
                            <li class="list-group-item">@((MarkupString)m)</li>
                        }
                    </ul>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Table</BSTabLabel>
                <BSTabContent>Coming soon</BSTabContent>
            </BSTab>
        </BSTabList>
        <BSTabSelectedContent />
    </BSTabGroup>
</p>

@code {
    const string REGEX_SESSION_STORAGE_KEY = nameof(REGEX_SESSION_STORAGE_KEY);
    const string TESTS_SESSION_STORAGE_KEY = nameof(TESTS_SESSION_STORAGE_KEY);

    protected string Tests { get; set; }
    protected string RegexText { get; set; }
    protected IEnumerable<string> MatchedStrings { get; set; } = new List<string>();
    protected IEnumerable<string> SplitList { get; set; } = new List<string>();

    private Regex testRegex;
    private string prevRegexText;

    protected override async Task OnInitializedAsync()
    {
        RegexText = await SessionStorage.GetItemAsync(REGEX_SESSION_STORAGE_KEY);
        Tests = await SessionStorage.GetItemAsync(TESTS_SESSION_STORAGE_KEY);
    }

    protected void Test_Click(object e)
    {
        if (string.IsNullOrEmpty(RegexText))
            return;

        if (prevRegexText != RegexText)
        {
            try
            {
                Console.WriteLine("Changing RegEx");
                testRegex = new Regex(RegexText, RegexOptions.Compiled);
                prevRegexText = RegexText;

                SessionStorage.SetItem(REGEX_SESSION_STORAGE_KEY, RegexText);
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"Failed to parse a RegEx: {ex.Message}; {ex.GetType().Name}");
                return;
            }
        }
        var tests = Tests?.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);

        var matches = regexService.GetMatches(tests, testRegex);

        MatchedStrings = matches
            .Where(mc => mc.Value.Any())
            .Select(mc => htmlHelperService.GetMarkedSpans(mc.Key, mc.Value, "mark-yellow"));

        SplitList = regexService.GetSplitList(tests, testRegex).Select(m => htmlHelperService.GetDelimeteredString(m, " <span class='oi oi-pin' aria-hidden='true'></span> "));

        SessionStorage.SetItem(TESTS_SESSION_STORAGE_KEY, Tests);
    }
}

