@using System.Text.RegularExpressions
@inject BlazorWasmRegexTest.Shared.Interfaces.IRegexService regexService

<h2>Regex Tester</h2>

<p>
    <label>Regex:</label>
    <input class="form-control" @bind="RegexText" />
</p>
<p>
    <label>Tests:</label>
    <textarea class="form-control" @bind="Tests" rows="10"></textarea>
</p>
<p>
    <BSButton Color="Color.Primary" OnClick="Test_Click"><span class="oi oi-beaker" aria-hidden="true">&nbsp;</span>Test</BSButton>
    @*<button class="btn btn-primary" @onclick="Test_Click">Test</button>*@
</p>
<p>
    <BSTabGroup>
        <BSTabList>
            <BSTab>
                <BSTabLabel>Matches</BSTabLabel>
                <BSTabContent>
                    <ul class="list-group">
                        @foreach (var m in Matches)
                        {
                            <li class="list-group-item">@m</li>
                        }
                    </ul>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Split list</BSTabLabel>
                <BSTabContent>
                    <ul class="list-group">
                        @foreach (var m in SplitList)
                        {
                            <li class="list-group-item">@String.Join(" | ", m)</li>
                        }
                    </ul>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Table</BSTabLabel>
                <BSTabContent>Coming soon</BSTabContent>
            </BSTab>
        </BSTabList>
        <BSTabSelectedContent />
    </BSTabGroup>
</p>

@code {
    protected string Tests { get; set; }
    protected string RegexText { get; set; }
    protected IEnumerable<string> Matches { get; set; } = new List<string>();
    protected IEnumerable<string[]> SplitList { get; set; } = new List<string[]>();

    private Regex testRegex;
    private string prevRegexText;

    protected void Test_Click(object e)
    {
        if (prevRegexText != RegexText)
        {
            Console.WriteLine("Changing RegEx");
            testRegex = new Regex(RegexText, RegexOptions.Compiled);
            prevRegexText = RegexText;
        }
        var tests = Tests?.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);

        Matches = regexService.GetMatches(tests, testRegex);
        SplitList = regexService.GetSplitList(tests, testRegex);
    }
}

